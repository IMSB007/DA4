
task3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000739  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000699  00000000  00000000  00000971  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a7  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000012b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000397  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  0000168f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000016cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  88:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
volatile uint8_t ADCvalue;
ISR(ADC_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	ADCvalue = ADCH; // only need to read the high value for 8 bit
  9c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <main>:
int main(void)
{
	DDRB = 0xFF;
  b0:	9f ef       	ldi	r25, 0xFF	; 255
  b2:	94 b9       	out	0x04, r25	; 4
	TCCR1A |= (1<<WGM11)|(1<<COM1A1);
  b4:	e0 e8       	ldi	r30, 0x80	; 128
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	82 68       	ori	r24, 0x82	; 130
  bc:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12)|(1<<WGM13)|(1<<CS11);
  be:	e1 e8       	ldi	r30, 0x81	; 129
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8a 61       	ori	r24, 0x1A	; 26
  c6:	80 83       	st	Z, r24
	ICR1 = 4165;
  c8:	25 e4       	ldi	r18, 0x45	; 69
  ca:	30 e1       	ldi	r19, 0x10	; 16
  cc:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  d0:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	ADMUX = 0; // use ADC0
  d4:	ec e7       	ldi	r30, 0x7C	; 124
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0); // use AVcc as the reference
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR); // Right adjust for 8 bit resolution
  e0:	80 81       	ld	r24, Z
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  e6:	ea e7       	ldi	r30, 0x7A	; 122
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	87 60       	ori	r24, 0x07	; 7
  ee:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); // Set ADC Auto Trigger Enable
  f0:	80 81       	ld	r24, Z
  f2:	80 62       	ori	r24, 0x20	; 32
  f4:	80 83       	st	Z, r24
	ADCSRB = 0; // 0 for free running mode
  f6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	ADCSRA |= (1 << ADEN); // Enable the ADC
  fa:	80 81       	ld	r24, Z
  fc:	80 68       	ori	r24, 0x80	; 128
  fe:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); // Enable Interrupts
 100:	80 81       	ld	r24, Z
 102:	88 60       	ori	r24, 0x08	; 8
 104:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Start the ADC conversion
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
	DDRB = 0xFF;
 10c:	94 b9       	out	0x04, r25	; 4
	sei();
 10e:	78 94       	sei
	while (1)
	{
		OCR1A = ADCvalue;
 110:	e8 e8       	ldi	r30, 0x88	; 136
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	91 83       	std	Z+1, r25	; 0x01
 11c:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	83 ec       	ldi	r24, 0xC3	; 195
 120:	99 e0       	ldi	r25, 0x09	; 9
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x72>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x78>
 128:	00 00       	nop
 12a:	f4 cf       	rjmp	.-24     	; 0x114 <main+0x64>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
